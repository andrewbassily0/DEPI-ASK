pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'andrewbassily0/depiask'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/andrewbassily0/DEPI-ASK'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    script {
                        def sonarToken = credentials('sonar_token')
                        sh '''
                            sonar-scanner \
                            -Dsonar.projectKey=DEPI-ASK \
                            -Dsonar.sources=. \
                            -Dsonar.login=${sonarToken}
                        '''
                    }
                }
            }
        }   
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true  
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_IMAGE}:${BUILD_NUMBER}")
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', 'dockerhub_credentials') {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Deploy with Ansible') {
            steps {
                ansiblePlaybook(
                    playbook: 'ansible/playbook.yml',
                    inventory: 'ansible/hosts.ini',
                    credentialsId: 'ansible',
                    extraVars: [
                        jenkins_build_number: "${BUILD_NUMBER}"
                    ]
                )
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            slackSend(
                channel: 'devops',
                message: "Build SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' succeeded. View build details: ${env.BUILD_URL}",
                tokenCredentialId: 'Slack-Token'
            )
        }
        failure {
            slackSend(
                channel: 'devops',
                message: "Build FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' failed. View build details: ${env.BUILD_URL}",
                tokenCredentialId: 'Slack-Token'
            )
        }
    }
}
